name: CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  
  workflow_dispatch:
jobs:
  ami_build:
    name: ami_build
    runs-on: ubuntu-latest
    outputs:
      AMI_ID: ${{steps.GET_AMI.outputs.AMI_ID}}
    steps:
    - uses: actions/checkout@v3
    - name: Package zip
      run: cd ../ && zip -r webapp.zip webapp && cd - && cp ../webapp.zip .
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
        aws-region: us-east-1
    
    - name: Set sequalize environment
      run: export NODE_ENV=development
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: 16.17
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test

    - name: Setup `packer`
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: "latest"
    - name: Run `packer init`
      id: init
      run: "packer init aws-ami.pkr.hcl"
    # - name: Run `packer build`
    #   id: build
    #   run: "packer build aws-ami.pkr.hcl"
    - name: GET AMI ID
      id: GET_AMI
      run: | 
        AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
        echo $AMI_ID
        echo "AMI_ID=$AMI_ID" >> "$GITHUB_OUTPUT"       
  auto_deployement:
    runs-on: ubuntu-latest
    needs: [ami_build]
    environment: ${{vars.ENVIRONMENT}}
    env:
        AMI_ID: ${{needs.ami_build.outputs.AMI_ID || vars.AMI_ID}}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
          aws-region: us-east-1 
      - name: Check AMI ID 
        run: echo $AMI_ID
      - name: check aws version
        run: "aws --version"
      - name: refresh launchTemplate
        run: |
            aws ec2 create-launch-template-version --no-cli-pager \
            --launch-template-data '{"ImageId":"${{env.AMI_ID}}"}' \
            --source-version 1 --launch-template-id ${{vars.LAUNCH_TEMPLATE_ID}} 
      - name: refresh autoscaling instance
        run: |
              aws autoscaling start-instance-refresh \
              --auto-scaling-group-name="${{vars.AUTOSCALING_GROUP_NAME}}"

